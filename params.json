{
  "name": "Validatorjs",
  "tagline": "An implementation to check if a value is valid and as expected and execute the correct function.",
  "body": "# **Vjs**\r\n\r\nA Basic validator implementation, which checks if a value is valid and as expected and executes the corresponding callback function as needed, and at the end of the check if a callback for the whole test exists it will execute the corresponding callback.\r\n\r\n<script async src=\"//jsfiddle.net/pharzan/yhqa3zsn/1/embed/js,result/\"></script>\r\n\r\n**Structure:**\r\nvalidate.js exports two modules:\r\n* Validate <- for validation purposes\r\n* Checks <- the isBlah() utilities are here (for example isArray is in here). \r\n\r\n**Usage and Explanation & consedirations:**\r\n\r\n* if the the check function fails\r\n  + if there is no callback or string defined -> the return value will be false\r\n  + if there is a callback or string defined -> the return value will be the string or the return of the function\r\n* if the the check function passes \r\n  + if there is no callback or string defined -> the return value will be true\r\n  + if there is a callback or string defined -> the return value will be the string or the return of the function\r\n* the return value of validate is an array.\r\n* If you have your own check functions there is _no need_ to import the check functions.\r\n\r\nImport the Vjs validate method and the check utils.\r\n\r\n```javascript\r\nvar v=require('../validate.js').Validate;\r\nvar c=require('../validate.js').Check;\r\n```\r\nThe v object is instantiated when imported and now it can be used to call the validate method accompanied with the set method to set the validations.\r\n\r\n>result=v.validate([v.validate([c.isString('hello'),\r\n\t                onFail,\r\n                    onPass\r\n                ],\r\n\t\t\t\t[v.validate([c.isString(1984),\r\n\t                onFail,\r\n                    onPass\r\n                ],\r\n\t\t\t\t[outerFail,outerPass]);\r\n\t\t\t\t\r\nonFail and onPass can be a string or a function. On each of the corresponding states either the string is returned or a return value from a function is retuned.\r\nAfter the validation finishes if there is a fail the outerFail will execute or if all is passed the outerPass is executed.\r\n\r\n```javascript\r\nvar result=v.validate([\r\n                        c.isString('hello'),\r\n\t                    'failed is a string',\r\n    \t                'passed is a string')\r\n\t\t  ]);\r\n\t\t  \r\nconsole.log(result[0]) //  passed is a string\r\n\t\r\nvar result=v.validate([\r\n                        c.isString('hello'),\r\n\t                    'failed is a string',\r\n    \t                'passed is a string')\r\n\t\t  ],\r\n\t\t  [\r\n                        c.isString(33),\r\n\t                    'failed is a string',\r\n    \t                'passed is a string')\r\n\t\t  ]\r\n\t\t  );\r\n\t\t  \r\nconsole.log(result[0]) //  passed is a string\r\nconsole.log(result[1]) //  failed is a string\r\n\t\r\n```\r\nor in the above examples instead of the strings a function may be used as\r\n```javascript\r\nvar myOnFail=function(){\r\n             return 'failed is a string'\r\n\t}\r\nvar myOnPass=function(){\r\n             return 'passed is a string'\r\n\t}\r\n\t\r\n\t\r\nvar result=v.validate([\r\n                        c.isString('hello'),\r\n\t                    myOnFail,\r\n    \t                myOnPass)\r\n\t\t  ],\r\n\t\t  [\r\n                        c.isString(33),\r\n\t                    myOnFail,\r\n    \t                myOnPass)\r\n\t\t  ]\r\n\t\t  );\r\n\t\t  \r\nconsole.log(result[0]) //  passed is a string\r\nconsole.log(result[1]) //  failed is a string\r\n\r\n```\r\n\r\n### Links:\r\n\r\n* [GitHub](https://github.com/pharzan/validatorJS) page\r\n* [jsFiddle](https://jsfiddle.net/pharzan/yhqa3zsn/1/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}